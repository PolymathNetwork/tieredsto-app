{"version":3,"sources":["utils.js","STO.js","STOForm.js","App.js","rootReducer.js","combineReducers.js","serviceWorker.js","index.js"],"names":["currencies","Item","Descriptions","columns","title","dataIndex","key","render","text","formatBN","formatDate","date","moment","format","bn","toString","formatBool","bool","address","startDate","endDate","raisedFundsWallet","unsoldTokensWallet","raisedAmount","soldTokensAmount","investorCount","fundraiseCurrencies","isPaused","capReached","isFinalized","preIssueAllowed","beneficialInvestmentsAllowed","currentTier","tiers","map","tier","index","style","textAlign","column","size","label","span","curr","formatCurrency","join","pagination","rowKey","dataSource","Option","Select","Form","formItemLayout","labelCol","xs","sm","wrapperCol","addressValidator","rule","value","callback","web3Utils","walletAddress","launchSTO","network","useForm","getFieldDecorator","validateFields","resetFields","useState","tiersCount","setTiersCount","isUSD","setIsUSD","denomination","setDenomination","tiersArray","Array","keys","console","log","colon","maxWidth","initialValue","rules","required","showTime","onChange","i","pattern","message","e","target","RegExp","test","validator","valuePropName","Number","placeholder","offset","onClick","type","a","async","preventDefault","tierFields","fields","push","forEach","field","usdStableCoinAddresses","force","then","values","currency","stableCoinAddresses","stablecoinAddress","toDate","minimumInvestment","BigNumber","nonAccreditedInvestmentLimit","customCurrency","currencySymbol","catch","error","Content","Layout","Header","Sider","asyncAction","dispatch","func","msg","rets","App","useContext","Store","state","usePolymathSdk","sdkError","sdk","networkId","useTokenSelector","tokenSelectorError","tokenSelector","tokens","tokenIndex","launching","setLaunching","AppReducer","loading","loadingMessage","stos","token","length","useEffect","issuance","offerings","getStos","sto","stoType","filter","window","spinning","tip","backgroundColor","display","flexDirection","justifyContent","alignItems","width","padding","onTokenSelect","closable","showIcon","marginBottom","alignSelf","visible","onOk","onCancel","STOForm","params","launchTieredSto","queue","run","ret","STO","rootReducer","reducers","action","hasChanged","nextState","Object","reduce","result","combineReducers","undefined","payload","Error","Boolean","location","hostname","match","initialState","createContext","ReactDOM","store","useReducer","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4adbde90.chunk.js","sourcesContent":["export const currencies = [\n  'ETH',\n  'POLY',\n  'DAI (USD Stablecoin)',\n  'Non-USD Stablecoin',\n];\n","import React, { Fragment } from 'react';\nimport { Descriptions, Table, Divider } from 'antd';\nimport moment from 'moment';\n\nimport { currencies } from './utils';\nconst { Item } = Descriptions;\n\nconst columns = [\n  {\n    title: 'Tokens on Sale',\n    dataIndex: 'tokensOnSale',\n    key: 'tokensOnSale',\n    render: text => formatBN(text),\n  },\n  {\n    title: 'Tokens Sold',\n    dataIndex: 'tokensSold',\n    key: 'tokensSold',\n    render: text => formatBN(text),\n  },\n  {\n    title: 'Price',\n    dataIndex: 'price',\n    key: 'price',\n    render: text => formatBN(text),\n  },\n  {\n    title: 'Tokens on Discount',\n    dataIndex: 'tokensWithDiscount',\n    key: 'tokensWithDiscount',\n    render: text => formatBN(text),\n  },\n  {\n    title: 'Tokens Sold on Discount',\n    dataIndex: 'tokensSoldAtDiscount',\n    key: 'tokensSoldAtDiscount',\n    render: text => formatBN(text),\n  },\n  {\n    title: 'Discounted Price',\n    dataIndex: 'discountedPrice',\n    key: 'discountedPrice',\n    render: text => formatBN(text),\n  },\n];\n\nconst formatDate = date => moment(date).format('dddd, MMMM Do YYYY, h:mm:ss a');\n// @TODO url\nconst formatUrl = url => url;\nconst formatBN = bn => bn.toString();\nconst formatCurrency = curr => currencies[curr];\nconst formatBool = bool => (bool ? 'True' : 'False');\n\n/*\n  address: \"0xcb3aff8589322c8c80af879e820f3f585d05c463\"\n  securityTokenSymbol: \"ZXCV\"\n  securityTokenId: \"c2VjdXJpdHlUb2tlbjp7InN5bWJvbCI6IlpYQ1YifQ==\"\n  stoType: \"Tiered\"\n  startDate: Fri Jan 10 2020 00:30:00 GMT-0800 (Pacific Standard Time) {}\n  endDate: Fri Jan 24 2020 01:00:00 GMT-0800 (Pacific Standard Time) {}\n  raisedFundsWallet: \"0x33a2cff8182d82af69ebfc5d3edf8f699555f146\"\n  unsoldTokensWallet: \"0x33a2cff8182d82af69ebfc5d3edf8f699555f146\"\n  raisedAmount: V {s: 1, e: 0, c: Array(1)}\n  soldTokensAmount: V {s: 1, e: 0, c: Array(1)}\n  investorCount: 0\n  fundraiseCurrencies: [0]\n  isPaused: false\n  capReached: false\n  isFinalized: false\n  preIssueAllowed: false\n  beneficialInvestmentsAllowed: false\n  context: Context {contractWrappers: PolymathBase, currentWallet: Wallet, factories: {…}}\n  currentTier: 0\n  tiers: [{\n    tokensOnSale: V {s: 1, e: 2, c: Array(1)}\n    tokensSold: V {s: 1, e: 0, c: Array(1)}\n    price: V {s: 1, e: 2, c: Array(1)}\n    tokensWithDiscount: V {s: 1, e: 0, c: Array(1)}\n    tokensSoldAtDiscount: V {s: 1, e: 0, c: Array(1)}\n    discountedPrice: V {s: 1, e: 0, c: Array(1)}\n  }]\n  */\n\nexport default ({\n  address,\n  startDate,\n  endDate,\n  raisedFundsWallet,\n  unsoldTokensWallet,\n  raisedAmount,\n  soldTokensAmount,\n  investorCount,\n  fundraiseCurrencies,\n  isPaused,\n  capReached,\n  isFinalized,\n  preIssueAllowed,\n  beneficialInvestmentsAllowed,\n  currentTier,\n  tiers,\n}) => {\n  tiers = tiers.map((tier, index) => {\n    tier.key = index;\n    return tier;\n  });\n  return (\n    <Fragment>\n      <Descriptions style={{ textAlign: 'initial' }} column={2} size=\"small\">\n        <Item label=\"Starts\">{formatDate(startDate)}</Item>\n        <Item label=\"Ends\">{formatDate(endDate)}</Item>\n        <Item label=\"Address\" span={2}>\n          {formatUrl(address)}\n        </Item>\n        <Item label=\"Raised Funds Wallet\" span={2}>\n          {formatUrl(raisedFundsWallet)}\n        </Item>\n        <Item label=\"Unsold Tokens Wallet\" span={2}>\n          {formatUrl(unsoldTokensWallet)}\n        </Item>\n        <Item label=\"Raised Amount\">{formatBN(raisedAmount)}</Item>\n        <Item label=\"Sold Tokens Amount\">{formatBN(soldTokensAmount)}</Item>\n        <Item label=\"Investor Count\">{formatBN(investorCount)}</Item>\n        <Item label=\"Fund-raise Currencies\">\n          {fundraiseCurrencies.map(curr => formatCurrency(curr)).join(', ')}\n        </Item>\n        <Item label=\"Is Paused\">{formatBool(isPaused)}</Item>\n        <Item label=\"Cap Reached\">{formatBool(capReached)}</Item>\n        <Item label=\"Is Finalized\">{formatBool(isFinalized)}</Item>\n        <Item label=\"Pre-issuance Allowed\">{formatBool(preIssueAllowed)}</Item>\n        <Item label=\"Beneficial Investments Allowed\">\n          {formatBool(beneficialInvestmentsAllowed)}\n        </Item>\n        <Item label=\"Current Tier\">{currentTier}</Item>\n      </Descriptions>\n      <h4>Tiers</h4>\n      <Table\n        size=\"small\"\n        pagination={false}\n        columns={columns}\n        rowKey=\"key\"\n        dataSource={tiers}\n      />\n      <Divider />\n    </Fragment>\n  );\n};\n","import React, { useState, Fragment } from 'react';\nimport useForm from 'rc-form-hooks';\nimport {\n  Form,\n  Input,\n  Button,\n  DatePicker,\n  InputNumber,\n  Select,\n  Switch,\n} from 'antd';\nimport { currencies } from './utils';\nimport * as web3Utils from 'web3-utils';\nimport { BigNumber } from '@polymathnetwork/sdk';\nimport moment from 'moment';\n\nconst { Option } = Select;\n\nconst { Item } = Form;\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\n\nconst NONUSD = 3;\n\nconst addressValidator = (rule, value, callback) => {\n  if (value && !web3Utils.isAddress(value)) {\n    callback('Address is invalid');\n  } else {\n    callback();\n  }\n};\n\n/**\n * Launch a Tiered STO\n *\n * @param startDate date when the STO should start\n * @param endDate date when the STO should end\n * @param tiers tier information\n * @param tiers[].tokensOnSale amount of tokens to be sold on that tier\n * @param tiers[].price price of each token on that tier\n * @param tiers[].tokensWithDiscount amount of tokens to be sold on that tier at a discount if paid in POLY (must be less than tokensOnSale, defaults to 0)\n * @param tiers[].discountedPrice price of discounted tokens on that tier (defaults to 0)\n * @param nonAccreditedInvestmentLimit maximum investment for non-accredited investors\n * @param minimumInvestment minimum investment amount\n * @param currencies array of currencies in which the funds will be raised (ETH, POLY, StableCoin)\n * @param raisedFundsWallet wallet address that will receive the funds that are being raised\n * @param unsoldTokensWallet wallet address that will receive unsold tokens when the end date is reached\n * @param stableCoinAddresses array of stable coins that the offering supports\n * @param customCurrency custom currency data. Allows the STO to raise funds pegged to a different currency. Optional, defaults to USD\n * @param customCurrency.currencySymbol symbol of the custom currency (USD, CAD, EUR, etc. Default is USD)\n * @param customCurrency.ethOracleAddress address of the oracle that states the price of ETH in the custom currency. Only required if raising funds in ETH\n * @param customCurrency.polyOracleAddress address of the oracle that states the price of POLY in the custom currency. Only required if raising funds in POLY\n * @param allowPreIssuance whether to have all tokens issued on STO start. Default behavior is to issue on purchase\n */\n\nexport default ({ walletAddress, launchSTO, network }) => {\n  const { getFieldDecorator, validateFields, resetFields } = useForm();\n  const [tiersCount, setTiersCount] = useState(1);\n  const [isUSD, setIsUSD] = useState(true);\n  const [denomination, setDenomination] = useState('USD');\n  const tiersArray = [...Array(tiersCount).keys()];\n  console.log('tiersArray', tiersCount, tiersArray);\n  console.log('Is USD', isUSD);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const tierFields = [\n      'tokensOnSale',\n      'price',\n      'tokensWithDiscount',\n      'discountedPrice',\n    ];\n\n    let fields = [\n      'startDate',\n      'endDate',\n      'nonAccreditedInvestmentLimit',\n      'minimumInvestment',\n      'currencies',\n      'raisedFundsWallet',\n      'unsoldTokensWallet',\n      'allowPreissuance',\n    ];\n    if (!isUSD) {\n      fields.push('currency');\n      fields.push('stablecoinAddress');\n    }\n    tiersArray.forEach(i => {\n      fields.push(...tierFields.map(field => `${field}_${i}`));\n    });\n\n    // @TODO switch DAI address based on network\n    // @TODO allow adding custom stable coins?\n    const usdStableCoinAddresses = [\n      '0xc4375b7de8af5a38a93548eb8453a498222c4ff2',\n    ];\n\n    validateFields(fields, { force: true })\n      .then(async values => {\n        const currency = Number(values.currency);\n        // In case of Non-USD stablecoin, set fund-raise type to Stablecoin.\n        values.currencies = currency === NONUSD ? [2] : [currency];\n        values.stableCoinAddresses = isUSD\n          ? usdStableCoinAddresses\n          : [values.stablecoinAddress];\n        values.startDate = values.startDate.toDate();\n        values.endDate = values.endDate.toDate();\n        values.minimumInvestment = new BigNumber(values.minimumInvestment);\n        values.nonAccreditedInvestmentLimit = new BigNumber(\n          values.nonAccreditedInvestmentLimit\n        );\n        if (!isUSD) {\n          values.customCurrency = {\n            currencySymbol: denomination,\n          };\n        }\n\n        values.tiers = [];\n        tiersArray.forEach(tier => {\n          values.tiers[tier] = {};\n          tierFields.forEach(field => {\n            if (typeof values[`${field}_${tier}`] === 'number') {\n              values.tiers[tier][field] = new BigNumber(\n                values[`${field}_${tier}`]\n              );\n            } else {\n              values.tiers[tier][field] = values[`${field}_${tier}`];\n            }\n            delete values[`${field}_${tier}`];\n          });\n        });\n\n        launchSTO(values);\n      })\n      .catch(e => console.error(e.message));\n  };\n\n  const dateFormat = 'YYYY-MM-DD';\n\n  return (\n    <Form\n      colon={false}\n      style={{ maxWidth: 650, textAlign: 'left' }}\n      {...formItemLayout}\n    >\n      <Item label=\"Start Date\">\n        {getFieldDecorator('startDate', {\n          // @TODO remove\n          initialValue: moment('2020-02-01', dateFormat),\n          rules: [{ required: true }],\n        })(<DatePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />)}\n      </Item>\n      <Item label=\"End Date\">\n        {getFieldDecorator('endDate', {\n          // @TODO remove\n          initialValue: moment('2020-02-05', dateFormat),\n          rules: [{ required: true }],\n        })(<DatePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />)}\n      </Item>\n      <Item label=\"Non-accredited Investment Limit\">\n        {getFieldDecorator('nonAccreditedInvestmentLimit', {\n          // @TODO remove\n          initialValue: 5,\n          rules: [{ required: true }],\n        })(<InputNumber />)}\n      </Item>\n      <Item label=\"Minimum Investment\">\n        {getFieldDecorator('minimumInvestment', {\n          // @TODO remove\n          initialValue: 5,\n          rules: [{ required: true }],\n        })(<InputNumber />)}\n      </Item>\n      <Item label=\"Fund-raise Currency\">\n        {getFieldDecorator('currency', {\n          rules: [{ required: true }],\n        })(\n          <Select\n            onChange={value => {\n              console.log('currency value', value);\n              if (value == NONUSD) {\n                setIsUSD(false);\n              } else {\n                setIsUSD(true);\n                setDenomination('USD');\n              }\n            }}\n          >\n            {currencies.map((curr, i) => (\n              <Option key={i}>{curr}</Option>\n            ))}\n          </Select>\n        )}\n      </Item>\n      {!isUSD && (\n        <Fragment>\n          <Item label=\"Currency Symbol\">\n            {getFieldDecorator('denomination', {\n              rules: [\n                { required: true },\n                {\n                  pattern: /^[a-zA-Z]{3}$/,\n                  message:\n                    'Please enter a valid three character currency symbol.',\n                },\n              ],\n            })(\n              <Input\n                onChange={e => {\n                  console.log(e.target.value);\n                  if (RegExp(/^[a-zA-Z]{3}$/).test(e.target.value)) {\n                    setDenomination(e.target.value);\n                  }\n                }}\n              />\n            )}\n          </Item>\n          <Item label=\"Non-USD Stablecoin Address\">\n            {getFieldDecorator('stablecoinAddress', {\n              rules: [{ required: true }, { validator: addressValidator }],\n            })(<Input />)}\n          </Item>\n        </Fragment>\n      )}\n\n      <Item label=\"Raised Funds Wallet\">\n        {getFieldDecorator('raisedFundsWallet', {\n          initialValue: walletAddress,\n          rules: [{ required: true }, { validator: addressValidator }],\n        })(<Input />)}\n      </Item>\n      <Item label=\"Unsold Tokens Wallet\">\n        {getFieldDecorator('unsoldTokensWallet', {\n          initialValue: walletAddress,\n          rules: [{ required: true }, { validator: addressValidator }],\n        })(<Input />)}\n      </Item>\n      <Item label=\"Allow Pre-minting\">\n        {getFieldDecorator('allowPreissuance', {\n          initialValue: false,\n          valuePropName: 'checked',\n        })(<Switch />)}\n      </Item>\n      <Item label=\"Tiers #\">\n        <Select\n          value={tiersCount}\n          onChange={value => setTiersCount(Number(value))}\n        >\n          {[1, 2, 3, 4, 5].map(i => (\n            <Option key={i}>{i}</Option>\n          ))}\n        </Select>\n      </Item>\n      {/*\n       * @param tiers[].tokensOnSale amount of tokens to be sold on that tier\n       * @param tiers[].price price of each token on that tier\n       * @param tiers[].tokensWithDiscount amount of tokens to be sold on that tier at a discount if paid in POLY (must be less than tokensOnSale, defaults to 0)\n       * @param tiers[].discountedPrice price of discounted tokens on that tier (defaults to 0)\n       */}\n\n      <table>\n        <tr>\n          <td>Tokens on Sale</td>\n          <td>Price</td>\n          <td>Discounted Tokens</td>\n          <td>Discounted Price</td>\n        </tr>\n        {tiersArray.map(i => {\n          return (\n            <tr>\n              {/* <div style={{ display: 'flex', flexDirection: 'row' }} key={i}> */}\n              <td>\n                {/* <Item label=\"Tokens on Sale\"> */}\n                {getFieldDecorator(`tokensOnSale_${i}`, {\n                  // @TODO remove\n                  initialValue: 5,\n                  rules: [{ required: true }],\n                })(<InputNumber placeholder=\"Tokens on Sale\" />)}\n                {/* </Item> */}\n              </td>\n              <td>\n                {/* <Item label=\"Price\"> */}\n                {getFieldDecorator(`price_${i}`, {\n                  // @TODO remove\n                  initialValue: 5,\n                  rules: [{ required: true }],\n                })(<InputNumber placeholder=\"Price\" />)}\n                {/* </Item> */}\n              </td>\n              <td>\n                {/* <Item label=\"Tokens on Discount\"> */}\n                {getFieldDecorator(`tokensWithDiscount_${i}`)(\n                  <InputNumber placeholder=\"Tokens on Discount\" />\n                )}\n                {/* </Item> */}\n              </td>\n              <td>\n                {/* <Item label=\"Price\"> */}\n                {getFieldDecorator(`discountedPrice_${i}`)(\n                  <InputNumber placeholder=\"Discounted Price\" />\n                )}\n                {/* </Item> */}\n              </td>\n              {/* </div> */}\n            </tr>\n          );\n        })}\n      </table>\n\n      <Item\n        wrapperCol={{\n          xs: { span: 24, offset: 0 },\n          sm: { span: 16, offset: 8 },\n        }}\n      >\n        <Button\n          onClick={() => {\n            resetFields();\n          }}\n        >\n          Cancel\n        </Button>\n        <Button type=\"primary\" onClick={handleSubmit}>\n          Save\n        </Button>\n      </Item>\n    </Form>\n  );\n};\n","import React, { useContext, useEffect, Fragment, useState } from 'react';\nimport {\n  usePolymathSdk,\n  useTokenSelector,\n  User,\n  Network,\n} from '@polymathnetwork/react';\nimport { Layout, Spin, Alert, Button, Modal } from 'antd';\n\nimport { Store } from './index';\nimport STO from './STO';\nimport STOForm from './STOForm';\n\nconst { Content, Header, Sider } = Layout;\n\nexport const reducer = (state, action) => {\n  console.log('ACTION', action);\n  switch (action.type) {\n    case 'ASYNC_START':\n      return {\n        ...state,\n        loading: true,\n        loadingMessage: action.msg,\n        error: undefined,\n      };\n    case 'ASYNC_COMPLETE':\n      const { type, ...payload } = action;\n      return {\n        ...state,\n        ...payload,\n        loading: false,\n        loadingMessage: '',\n        error: undefined,\n      };\n    case 'ERROR':\n    case 'ASYNC_ERROR':\n      const { error } = action;\n      return {\n        ...state,\n        loading: false,\n        loadingMessage: '',\n        error,\n      };\n    case 'TOKEN_SELECTED':\n      const { tokenIndex } = action;\n      return {\n        ...state,\n        tokenIndex,\n        error: undefined,\n        stos: null,\n      };\n    default:\n      throw new Error(`Unrecognized action type: ${action.type}`);\n  }\n};\n\nasync function asyncAction(dispatch, func, msg = '') {\n  try {\n    dispatch({ type: 'ASYNC_START', msg });\n    const rets = await func();\n    dispatch({ type: 'ASYNC_COMPLETE', ...rets });\n  } catch (error) {\n    dispatch({ type: 'ASYNC_ERROR', error: error.message });\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useContext(Store);\n  let { error: sdkError, sdk, networkId, walletAddress } = usePolymathSdk();\n  let {\n    error: tokenSelectorError,\n    tokenSelector,\n    tokens,\n    tokenIndex,\n  } = useTokenSelector(sdk, walletAddress);\n  const [launching, setLaunching] = useState(false);\n  let { loading, loadingMessage, error, stos } = state.AppReducer;\n  const token = tokens[tokenIndex];\n\n  error = error || sdkError || tokenSelectorError;\n  if (!error && !loadingMessage) {\n    if (!sdk) {\n      loading = true;\n      loadingMessage = 'Initializing Polymath SDK';\n    } else if (!tokens.length) {\n      loading = true;\n      loadingMessage = 'Loading your security tokens';\n    }\n  }\n\n  useEffect(() => {\n    async function getStos() {\n      const stos = (await token.issuance.offerings.getStos()).filter(\n        sto => sto.stoType === 'Tiered'\n      );\n      return {\n        stos,\n      };\n    }\n    if (token && stos === null) {\n      asyncAction(\n        dispatch,\n        () => getStos(),\n        'Loading Security Token Offerings.'\n      );\n    }\n  }, [token, stos]);\n\n  function launchSTO(params) {\n    async function launchSTO() {\n      console.log('Launching STO', params);\n      const queue = await token.issuance.offerings.launchTieredSto(params);\n      const ret = await queue.run();\n      console.log('LaunchSTO ret', ret);\n\n      dispatch({ type: 'TOKEN_SELECTED' });\n    }\n    asyncAction(dispatch, () => launchSTO(), 'Launching STO..');\n  }\n\n  window.token = token;\n  console.log(stos);\n\n  return (\n    <div>\n      <Spin spinning={loading} tip={loadingMessage} size=\"large\">\n        <Layout>\n          <Header\n            style={{\n              backgroundColor: 'white',\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'flex-end',\n              alignItems: 'center',\n            }}\n          >\n            <Network networkId={networkId} />\n            <User walletAddress={walletAddress} />\n          </Header>\n          <Layout>\n            <Sider\n              width={350}\n              style={{\n                padding: 50,\n                backgroundColor: '#FAFDFF',\n              }}\n            >\n              {walletAddress && tokens && (\n                <div\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    width: 250,\n                    justifyContent: 'flex-start',\n                  }}\n                >\n                  {tokenSelector({\n                    onTokenSelect: () => dispatch({ type: 'TOKEN_SELECTED' }),\n                  })}\n                </div>\n              )}\n            </Sider>\n            <Content\n              style={{\n                padding: 50,\n                backgroundColor: '#FAFDFF',\n              }}\n            >\n              {error && (\n                <Alert message={error} type=\"error\" closable showIcon />\n              )}\n              {token && (\n                <Fragment>\n                  <Button\n                    style={{ marginBottom: 20, alignSelf: 'flex-end' }}\n                    type=\"primary\"\n                    onClick={() => setLaunching(true)}\n                  >\n                    LAUNCH TIERED STO\n                  </Button>\n                  <Modal\n                    title=\"Tiered STO\"\n                    visible={launching}\n                    width={750}\n                    onOk={() => setLaunching(false)}\n                    onCancel={() => setLaunching(false)}\n                  >\n                    <STOForm\n                      walletAddress={walletAddress}\n                      launchSTO={launchSTO}\n                    />\n                  </Modal>\n                </Fragment>\n              )}\n              {stos && stos.map(sto => <STO key={sto.address} {...sto} />)}\n            </Content>\n          </Layout>\n        </Layout>\n      </Spin>\n    </div>\n  );\n}\n\nexport default App;\n","import combineReducers from './combineReducers'\nimport { reducer as AppReducer } from './App'\nconst rootReducer = combineReducers({AppReducer})\n\nexport default rootReducer","/**\n * @see https://codesandbox.io/s/rm7587n34m?from-embed\n *\n * A size-optimized refactor of Redux's combineReducers.\n * All safeguards removed. Use at your own risk.\n * https://github.com/reduxjs/redux/blob/master/src/combineReducers.js\n */\n\nconst combineReducers = reducers => (state, action) => {\n  let hasChanged\n  const nextState = Object.keys(reducers).reduce((result, key) => {\n    result[key] = reducers[key](state[key], action)\n    hasChanged = hasChanged || result[key] !== state[key]\n    return result\n  }, {})\n  return hasChanged ? nextState : state\n}\n\nexport default combineReducers\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { createContext, useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport rootReducer from './rootReducer';\nimport * as serviceWorker from './serviceWorker';\n\nconst initialState = {\n  AppReducer: {\n    loading: false,\n    loadingMessage: '',\n    error: undefined,\n    walletAddress: '',\n    stos: null,\n  },\n};\n\nexport const Store = createContext();\nconst WrappedApp = () => {\n  const store = useReducer(rootReducer, initialState);\n  return (\n    <Store.Provider value={store}>\n      <App />\n    </Store.Provider>\n  );\n};\n\nReactDOM.render(<WrappedApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}